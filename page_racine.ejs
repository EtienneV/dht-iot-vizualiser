<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />

	<title>Capteur de température</title>

	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">

	<style type="text/css">
	h1 {
		text-align: center;
	}
	</style>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>
	<script src="http://code.jquery.com/jquery-latest.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.0/Chart.bundle.js"></script>

	<script src='https://api.mapbox.com/mapbox-gl-js/v0.40.0/mapbox-gl.js'></script>
	<link href='https://api.mapbox.com/mapbox-gl-js/v0.40.0/mapbox-gl.css' rel='stylesheet' />
</head>
<body>
	<div class="container-fluid">

		<h1>Température via la DHT BitTorrent</h1>
		<!--<div id='map' style='width: 100%; height: 100%; position: absolute; left: 0;'></div>-->
		
		<div class="row">
			<div class="col-lg-6">
				<canvas id="myChart" width="200px" height="100px"></canvas>
				<canvas id="latence" width="200px" height="50px"></canvas>
			</div>
			<div class="col-lg-6">
				<div id='map' style='width: 800px; height: 500px;'></div>
			</div>
		</div>
	</div>

	<script>
	var socket = io();

	var ctx = document.getElementById("myChart").getContext('2d');

		//var data_tab = []
		var myChart = new Chart(ctx, {
			type: 'line',
			data: {
				datasets: [{
					label: 'Température',
					data: [],
					backgroundColor: [

					'rgba(153, 102, 255, 0.2)',
					'rgba(255, 159, 64, 0.2)'
					],
					borderColor: [

					'rgba(153, 102, 255, 1)',
					'rgba(255, 159, 64, 1)'
					]
				}]
			},
			options: {
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero:true
						}
					}],
					xAxes: [{
						type: 'time',
					}]
				},
				elements: {
					line: {
	                tension: 0.5, // disables bezier curves
	            }
	        }
	    }
	});

		var mylatence;

		var img = new Image();
		img.src = 'https://www.paillettes.fr/464/5-kg-paillettes-arc-en-ciel-400.jpg';

		img.onload = function() {
			var ctx2 = document.getElementById("latence").getContext('2d');
			var fillPattern = ctx.createPattern(img, 'repeat');

			mylatence = new Chart(ctx2, {
				type: 'line',
				data: {
					datasets: [{
						label: 'Latence',
						data: [],
						backgroundColor: [
						'rgba(70, 220, 30, 0.2)',
						'rgba(153, 102, 255, 0.2)',
						'rgba(255, 159, 64, 0.2)'
						],
						borderColor: [
						'rgba(70, 220, 30, 1)',
						'rgba(153, 102, 255, 1)',
						'rgba(255, 159, 64, 1)'
						]
					// backgroundColor: fillPattern
				}]
			},
			options: {
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero:true
						}
					}],
					xAxes: [{
						type: 'time',
					}]
				},
				elements: {
					line: {
	                	tension: 0, // disables bezier curves
	                }
	            }
	        }
	    });
		}

		socket.on('new_temp', function(msg){
			console.log(msg.time+" : "+msg.temp);
			myChart.data.datasets.forEach((dataset) => {
				dataset.data.push({
					x: msg.time * 1000,
					y: msg.temp
				});
			});
			myChart.update();
			mylatence.data.datasets.forEach((dataset) => {
				dataset.data.push({
					if (Date.now()/1000 - msg.time <= 60)
					{
						x: msg.time * 1000,
						y: (Date.now()/1000 - msg.time)
					}
					else
					{
						x: msg.time * 1000,
						y: 1000;
					}
				});
			});
			mylatence.update();
		//Mise à jour du deuxième graphe
	});








		mapboxgl.accessToken = 'pk.eyJ1IjoiY2hpcHNvbmR1bGVlIiwiYSI6ImQzM2UzYmQxZTFjNjczZWMyY2VlMzQ5NmM2MzEzYWRmIn0.0iPy8Qyw2FjGSxawGZxW8A';
		var map = new mapboxgl.Map({
			container: 'map',
			style: 'mapbox://styles/mapbox/dark-v9'
		});

		var geo_nodes = {
			"type": "FeatureCollection",
			"features": []
		};

		var geo_hasInfo = {
			"type": "FeatureCollection",
			"features": []
		};

		var geo_noInfo = {
			"type": "FeatureCollection",
			"features": []
		};

		map.on('load', function() {

			map.addSource('nodes', { type: 'geojson', data: geo_nodes});
			map.addLayer({
				"id": "nodes",
				"source": "nodes",
				"type": "circle",
				"paint": {
					"circle-radius": 2,
					"circle-color": "#e55e5e"
				}
			});

			map.addSource('nodes_hasInfo', { type: 'geojson', data: geo_hasInfo});
			map.addLayer({
				"id": "nodes_hasInfo",
				"source": "nodes_hasInfo",
				"type": "circle",
				"paint": {
					"circle-radius": 4,
					"circle-color": "#e55e5e"
				}
			});

			map.addSource('nodes_noInfo', { type: 'geojson', data: geo_noInfo});
			map.addLayer({
				"id": "nodes_noInfo",
				"source": "nodes_noInfo",
				"type": "circle",
				"paint": {
					"circle-radius": 2,
		            "circle-color": "#007cbf"/*,
		            'circle-radius': {
						property: 'distance',
						stops: [
							[0, 5],
							[100000, 1]
						]
					}*/
				}
			});

			socket.on('new_node', function(msg){
			//console.log("new_node"+msg.has_value)
			console.log(msg.long+", "+msg.lat)

			/*geo_nodes.features.push({
		            type: 'Feature',
		            geometry: {
		                type: 'Point',
		                coordinates: [msg.long, msg.lat]
		            }
		        });
			map.getSource('nodes').setData(geo_nodes);*/

			//console.log(msg.has_value)

			if(msg.has_value){
				geo_hasInfo.features.push({
					type: 'Feature',
					geometry: {
						type: 'Point',
						coordinates: [msg.long, msg.lat]
					},
					properties: {
		            	//distance: msg.distance
		            }
		        });
				map.getSource('nodes_hasInfo').setData(geo_hasInfo);
			}
			else {
				geo_noInfo.features.push({
					type: 'Feature',
					geometry: {
						type: 'Point',
						coordinates: [msg.long, msg.lat]
					},
					properties: {
		            	//distance: msg.distance
		            }
		        });
				map.getSource('nodes_noInfo').setData(geo_noInfo);
			}
		})
})




</script>
</body>
</html>
